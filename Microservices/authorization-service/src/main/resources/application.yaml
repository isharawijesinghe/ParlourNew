server:
  port: 9002

management:
  endpoints:
    web:
      exposure:
        include: '*'

spring:
  application:
    name: authorization-service
  cloud:
    kubernetes:
      enabled: false
  data:
    cassandra:
      keyspace-name: parlour
      contact-points: 127.0.0.1
      port: 9042
      schema-action: CREATE_IF_NOT_EXISTS
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 103482781185-v2t65kvaeumukp8oanm9fbjflvtq58u2.apps.googleusercontent.com
            clientSecret: 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
            redirectUri: "http://localhost:9002/login/oauth2/code/{registrationId}"
            scope:
              - email
              - profile

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    reactor.netty: DEBUG

eureka:
  instance:
    hostname: 127.0.0.1
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://127.0.0.1:8761/eureka/

app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000,http://localhost:8080
    #allowedOrigins: http://localhost
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
  security:
    jwt:
      keystore-location : keys/keystore.jks
      keystore-password : password
      key-alias : jwtsigning
      private-key-passphrase : password

